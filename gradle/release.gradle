ext.modules = [':core-api', ':core', ':common', ':mobile-engage-api', ':mobile-engage', ':predict-api', ':predict', 'emarsys', ':emarsys-sdk']

modules.each {
    project(it) {
        apply plugin: 'maven-publish'
        apply plugin: 'com.jfrog.bintray'

        task sourcesJar(type: Jar) {
            from android.sourceSets.main.java.srcDirs
            classifier = 'sources'
        }

        task javadoc(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator)) + configurations.compile
            failOnError false
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
        afterEvaluate {
            publishing {
                publications {
                    "${project.name}"(MavenPublication) {
                        groupId = group
                        artifactId = project.name

                        artifact sourcesJar
                        artifact javadocJar
                        artifact("$buildDir/outputs/aar/${project.name}-release.aar")
                        pom {
                            withXml {
                                def dependenciesNode = asNode().appendNode("dependencies")
                                configurations.getByName("api") {
                                    dependencies.forEach {
                                        def dependencyNode = dependenciesNode.appendNode("dependency")
                                        dependencyNode.appendNode("groupId", it.group)
                                        dependencyNode.appendNode("artifactId", it.name)
                                        dependencyNode.appendNode("version", it.version)
                                    }
                                }
                                configurations.getByName("implementation") {
                                    dependencies.forEach {
                                        def dependencyNode = dependenciesNode.appendNode("dependency")
                                        dependencyNode.appendNode("groupId", it.group)
                                        dependencyNode.appendNode("artifactId", it.name)
                                        dependencyNode.appendNode("version", it.version)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        bintray {
            def bintrayUser = null
            def bintrayApiKey = null
            def localConfigPropertiesFile = rootProject.file('localConfig.properties')
            def localConfigProperties = new Properties()
            if (localConfigPropertiesFile.exists()) {
                localConfigProperties.load(new FileInputStream(localConfigPropertiesFile))
                bintrayUser = localConfigProperties.getProperty("bintrayUser")
                bintrayApiKey = localConfigProperties.getProperty("bintrayApiKey")
            }

            user = bintrayUser == null ? System.env.BINTRAY_USER : bintrayUser
            key = bintrayApiKey == null ? System.env.BINTRAY_API_KEY : bintrayApiKey
            publications = ["$project.name"]
            publish = true
            override = true
            pkg {
                repo = 'android'
                name = project.name
                desc = project.name.replace('-', ' ').split(' ').collect { it.capitalize() }.join(' ')
                websiteUrl = 'https://github.com/emartech/android-emarsys-sdk'
                vcsUrl = 'https://github.com/emartech/android-emarsys-sdk.git'
                licenses = ['MPL-2.0']
                publicDownloadNumbers = true
            }
        }
    }
}

task release {
    modules.each {
        dependsOn project(it).tasks.getByName("bintrayUpload")
    }
}